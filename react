1. React kya hai?
React ek JavaScript library hai jo user interfaces banane ke liye use hoti hai.

2. JSX kya hai?
JSX ek syntax extension hai jo JavaScript ke andar HTML-like code likhne ki facility deta hai.

3. React ka virtual DOM kya hai?
Virtual DOM ek lightweight copy hota hai real DOM ka. React changes ko pehle virtual DOM mein karta hai aur phir real DOM mein efficiently update karta hai.

4. React ke key features kya hain?
Key features hain: JSX, Virtual DOM, Components, Unidirectional data flow, and Hooks.

5. React component types kya hote hain?
Class components aur Functional components.

6. State aur props mein kya fark hai?
State ek component ke internal data ko represent karta hai, jabki props parent se child component ko data pass karne ke liye use hote hain.

7. Functional component aur class component mein kya difference hai?
Class component mein this.state aur lifecycle methods hoti hain, jabki functional component mein hooks ka use hota hai.

8. React hooks kya hote hain?
React hooks functional components ko state aur lifecycle methods use karne ka tarika provide karte hain, jaise useState, useEffect, etc.

9. useState hook ka use kaise karte hain?
useState hook ka use state variable ko define karne ke liye hota hai.

js
Copy
const [count, setCount] = useState(0);
10. useEffect hook ka use kaise hota hai?
useEffect hook side effects manage karne ke liye use hota hai, jaise API call, event listener, etc.

js
Copy
useEffect(() => {
    // side effect code
}, [dependencies]);
11. React Router kya hai?
React Router ek library hai jo React applications mein navigation aur routing handle karti hai.

12. componentDidMount lifecycle method ka use kya hota hai?
componentDidMount lifecycle method tab call hota hai jab component render ho jata hai aur initial setup ki jarurat hoti hai.

13. PureComponent kya hota hai?
PureComponent ek optimized version hai class component ka jo automatic shallow comparison karta hai props aur state ka.

14. Higher Order Components (HOC) kya hote hain?
HOCs ek pattern hote hain jisme ek component ko dusre component ke through wrap kiya jata hai taaki functionality reuse ki ja sake.

15. Redux kya hai?
Redux ek state management library hai jo complex React applications ke liye centralized store manage karne ka kaam karti hai.

16. Redux ka flow kya hota hai?
Redux mein ek action dispatch hota hai, jise reducer process karta hai aur store update hota hai.

17. mapStateToProps aur mapDispatchToProps ka kya role hai Redux mein?
mapStateToProps state ko component mein map karta hai, aur mapDispatchToProps actions ko component mein map karta hai.

18. useContext hook ka use kaise hota hai?
useContext hook React ke context API ka use karta hai jo global state ko access karne ka tarika hai.

19. Context API kya hai?
Context API React ka built-in solution hai jo global state ko across components pass karne mein help karta hai without prop drilling.

20. Prop drilling kya hota hai?
Prop drilling tab hota hai jab props ko ek component se doosre component mein chain ke through pass kiya jata hai.

21. Keys React mein kyun important hoti hain?
Keys React ko identify karne mein madad karti hain ki kaunsa element change ho raha hai, jo efficient re-rendering mein help karti hai.

22. useRef hook ka use kaise hota hai?
useRef hook ka use DOM elements ko directly access karne ke liye ya mutable data store karne ke liye hota hai.

23. React.memo kya karta hai?
React.memo ek higher order component hai jo component ko optimize karta hai aur unnecessary re-renders ko prevent karta hai.

24. useReducer hook kya karta hai?
useReducer hook complex state logic ko handle karta hai jisme ek action aur reducer function ka use hota hai.

25. React Fragment kya hai?
React Fragment ek wrapper component hai jo DOM mein extra nodes add karne ke bina multiple children ko group karta hai.

26. Error Boundaries kya hoti hain?
Error boundaries wo components hote hain jo React application mein errors ko catch karte hain aur unhe handle karte hain.

27. Lazy Loading kya hai React mein?
Lazy loading ek technique hai jisme components ko tab load kiya jata hai jab wo actually required hote hain, isse performance improve hoti hai.

28. React mein event handling kaise hoti hai?
React mein event handling JavaScript ki tarah hoti hai, lekin React synthetic events ka use karta hai jo cross-browser compatibility provide karte hain.

29. setState function ka kaam kya hota hai?
setState function state ko update karta hai aur React ko batata hai ki component ko re-render karna hai.

30. React mein conditional rendering kaise hoti hai?
Conditional rendering mein hum JavaScript ka if, ternary operator, ya logical operators ka use karke elements ko render karte hain.

31. PropTypes ka kya role hai?
PropTypes ek validation system hai jo React components ke props ke type ko check karta hai aur warnings deta hai agar type mismatch ho.

32. Controlled Components kya hote hain?
Controlled components wo hote hain jisme form elements ka state React component mein manage hota hai.

33. Uncontrolled Components kya hote hain?
Uncontrolled components wo hote hain jisme form elements ka state directly DOM mein hota hai aur React state ko manage nahi karta.

34. useCallback hook ka use kaise hota hai?
useCallback hook kisi function ko memoize karta hai taaki wo unnecessary re-renders se bach sake.

35. useMemo hook ka use kaise hota hai?
useMemo hook expensive calculations ko memoize karta hai taaki wo unnecessary recalculation se bacha ja sake.

36. React mein forms kaise handle karte hain?
Forms ko handle karne ke liye React mein controlled components ya uncontrolled components ka use hota hai.

37. React mein list rendering kaise hoti hai?
List rendering mein hum map() function ka use karte hain taaki array elements ko render kar sake.

38. React mein side effects kaise handle karte hain?
Side effects ko handle karne ke liye useEffect hook ka use karte hain.

39. Prop validation kya hoti hai React mein?
Prop validation React mein ek feature hai jisme aap define kar sakte hain ki props ka type aur required properties kya honi chahiye.

40. Code splitting kya hota hai React mein?
Code splitting mein hum apne application ko chote chote parts mein divide karte hain taaki initial loading time kam ho.

Yeh 40 ReactJS questions aapko React ke concepts samajhne aur prepare karne mein help karenge.

React mein Two-way data binding ko implement karna thoda alag hota hai, kyunki React mein data one-way data flow principle follow karta hai. Iska matlab hai ki data state se UI (view) tak flow karta hai, lekin agar aapko two-way binding ki tarah ka behavior chahiye, to aapko state ko update karna padta hai jab user kisi input field ko change karta hai.

React mein two-way data binding ka implementation form elements mein commonly use hota hai.

Example of Two-way binding in React:
Concept: React mein state ko form elements se bind kiya jata hai, aur jab user kuch change karta hai, 
to state ko update kiya jata hai. Isse data dono directions mein flow karta hai: state to input (Model to View) aur input to state (View to Model).

js
Copy
import React, { useState } from 'react';

function App() {
  // State to store the value
  const [text, setText] = useState('');

  // Function to handle input changes
  const handleChange = (event) => {
    setText(event.target.value); // Update state when user types
  };

  return (
    <div>
      <h1>Two-way Binding Example</h1>
      {/* Model to View: value is bound to state */}
      <input
        type="text"
        value={text}  // Model to View (binds state to input field)
        onChange={handleChange}  // View to Model (updates state when input changes)
      />
      <p>Input Value: {text}</p>
    </div>
  );
}

export default App;
Key Concepts:
State Binding (Model to View): value={text} ‚Äî Isse input field ki value React ke state ke value se bind ho jati hai. Matlab jab state change hoti hai, to input field bhi update ho jata hai.

Event Handling (View to Model): onChange={handleChange} ‚Äî Jab user input field mein kuch type karta hai, onChange event trigger hota hai aur usse state update hoti hai. Yeh ek tarah se data ko view se model mein le aata hai.

Breakdown:
Jab user input field ko type karta hai, onChange event handler handleChange ko call karta hai, jo input field ki value ko state (text) mein update kar deta hai.
React automatically state ko input field ke value attribute ke saath sync kar deta hai, isliye jab state update hoti hai, input field bhi reflect hota hai.


CORS (Cross-Origin Resource Sharing) ek security feature hai jo web browsers implement karte hain. Yeh ek mechanism hai jo allow karta hai ki ek website (origin A) doosri website (origin B) ke resources access kar sake, lekin sirf tab jab server explicitly permission de.

üîπ CORS Ka Basic Concept
Jab bhi ek browser JavaScript se kisi doosre origin par request bhejta hai (jaise fetch ya XMLHttpRequest se), toh browser check karta hai ki server ne us origin ko allow kiya hai ya nahi. Agar server CORS headers nahi bhejta, toh browser request ko block kar deta hai.

üîπ Same-Origin Policy Kya Hai?
Same-Origin Policy ek security rule hai jo browser implement karta hai, jisme ek web page sirf apne origin ke resources access kar sakta hai.
üî∏ Origin = Protocol + Domain + Port
Agar koi website https://example.com hai, toh:

‚úÖ https://example.com/page1 (Allowed, Same-Origin)
‚ùå https://api.example.com/data (Blocked, Different Origin)
‚ùå http://example.com (Blocked, Different Protocol)
CORS is policy ka exception hai jo specific origins ko allow karta hai.


1. React Lifecycle Methods & Hooks

Q1: React ke lifecycle methods kaun-kaun se hote hain? Inka use case kya hai?

React ke lifecycle methods teen phases me divide kiye ja sakte hain:

Mounting Phase: constructor(), static getDerivedStateFromProps(), render(), componentDidMount()

Updating Phase: static getDerivedStateFromProps(), shouldComponentUpdate(), render(), getSnapshotBeforeUpdate(), componentDidUpdate()

Unmounting Phase: componentWillUnmount()

Q2: Functional aur Class components me lifecycle handling kaise different hoti hai?

Class components lifecycle methods ka use karte hain, jabki functional components hooks ka use karte hain jaise useEffect(), useState(), useMemo(), etc.

Feature

Class Components

Functional Components

State Management

this.state

useState()

Side Effects

componentDidMount(), componentDidUpdate(), componentWillUnmount()

useEffect()

Performance Optimization

shouldComponentUpdate()

useMemo(), useCallback()

Q3: Mounting phase me kaun-kaun se lifecycle methods execute hote hain?

constructor()

static getDerivedStateFromProps()

render()

componentDidMount()

Q4: Updating phase me kaun-kaun se lifecycle methods execute hote hain?

static getDerivedStateFromProps()

shouldComponentUpdate()

render()

getSnapshotBeforeUpdate()

componentDidUpdate()

Q5: Unmounting phase me kaunsa lifecycle method hota hai aur iska kya role hai?

componentWillUnmount(): Iska use memory cleanup aur event listeners remove karne ke liye hota hai.

Q6: useEffect() ka lifecycle methods se kya relation hai?

useEffect() ko hum mounting, updating, aur unmounting ke liye use kar sakte hain. Yeh componentDidMount(), componentDidUpdate(), 

aur componentWillUnmount() ka combined version hai.

Q7: useEffect() me cleanup function ka kya kaam hota hai?

Cleanup function componentWillUnmount() ki tarah kaam karta hai, jo memory leaks ko prevent karta hai.

useEffect(() => {
  const interval = setInterval(() => console.log("Running"), 1000);
  return () => clearInterval(interval); // Cleanup
}, []);

Q8: Kya useEffect() synchronous hota hai ya asynchronous?

useEffect() asynchronous nahi hota, lekin iska cleanup function synchronous hota hai.

Q9: useMemo() aur useCallback() me kya difference hai?

useMemo(): Computation ka result memoize karta hai.

useCallback(): Function definition ko memoize karta hai.

Q10: useReducer() aur useState() me kya difference hai?

useState(): Simple state management ke liye.

useReducer(): Complex state logic ke liye.

2. Two-Way Binding

Q11: React me two-way binding kaise implement karte hain?

const [text, setText] = useState("");
<input value={text} onChange={(e) => setText(e.target.value)} />

Q12: Controlled aur Uncontrolled components me kya difference hai?

Controlled Component: useState() ya useRef() ke through manage hota hai.

Uncontrolled Component: Directly DOM me value store hoti hai.

Q13: Form handling ke liye useState() aur useRef() me kya difference hai?

useState(): React ke state me value store hoti hai.

useRef(): DOM reference ka use hota hai.

Q14: React me debouncing aur throttling kaise implement kar sakte hain?

const debounce = (func, delay) => {
  let timer;
  return (...args) => {
    clearTimeout(timer);
    timer = setTimeout(() => func(...args), delay);
  };
};

3. Mounting & Unmounting

Q15: Mounting aur Unmounting ka kya matlab hota hai?

Mounting: Component ka DOM me load hona.

Unmounting: Component ka DOM se remove hona.

Q16: Functional component me mounting ke time kaun se hooks execute hote hain?

useEffect(() => {...}, [])

Q17: useEffect() ka cleanup function kab execute hota hai?

Component unmount hone ya dependencies change hone par.

Q18: Kya kisi component ko manually unmount kiya ja sakta hai?

Haan, useState() ya useRef() ka use karke conditionally component unmount kar sakte hain.

Q19: React Strict Mode ka mounting lifecycle methods par kya effect hota hai?

Strict Mode me componentDidMount() aur useEffect() twice execute hote hain.

4. Reconciliation Layer

Q20: Reconciliation layer kya hoti hai?

Yeh React ka process hai jo DOM updates ko efficiently handle karta hai.

Q21: Virtual DOM aur Real DOM me kya difference hai?

Virtual DOM ek lightweight in-memory representation hai.

Real DOM browser ka actual DOM hai.

Q22: React Fiber Architecture kya hai?

Fiber ek optimized reconciliation engine hai jo rendering ko smooth banata hai.

Q23: key prop ka kya role hota hai reconciliation process me?

Yeh React ko efficiently re-rendering karne me madad karta hai.

5. Optimization Techniques

Q24: React me unnecessary re-renders kaise avoid kar sakte hain?

React.memo()

useMemo()

useCallback()

Q25: React.memo() aur useMemo() me kya difference hai?

React.memo(): Pure component ke tarah work karta hai.

useMemo(): Expensive computation ko optimize karta hai.

Agar aur detail me kisi topic ka answer chahiye to batao


React mein Hooks ek tarika hai jisse hum functional components ke andar state aur lifecycle methods ka use kar sakte hain
 bina kisi class component ke. Hooks ne functional components ko aur bhi powerful bana diya hai aur ab hume class components likhne ki zaroorat nahi padti.

üîπ Hooks Kyu Zaroori Hai?
Pehle React mein agar hume state ya lifecycle methods ka use karna hota tha, toh hume class components likhne padte the. Lekin 
hooks aane ke baad hum functional components ke andar hi state aur lifecycle features ka use kar sakte hain. Yeh React 16.8 mein introduce kiya gaya tha.

‚ö° Types of React Hooks
üîπ Basic Hooks
useState ‚Üí Component ke andar state manage karne ke liye
useEffect ‚Üí Side effects (API calls, event listeners, timers) handle karne ke liye
useContext ‚Üí Context API ka use karne ke liye
üîπ Additional Hooks
useReducer ‚Üí Complex state management ke liye (Redux ka alternative)
useCallback ‚Üí Functions ko optimize karne ke liye
useMemo ‚Üí Expensive calculations ko optimize karne ke liye
useRef ‚Üí DOM manipulation aur values ko persist karne ke liye
useLayoutEffect ‚Üí useEffect ka ek variant jo synchronous execution karta hai
useImperativeHandle ‚Üí Parent component ko child ke methods expose karne ke liye
üîπ Custom Hooks
Agar multiple components me same logic baar-baar likhna pade, toh hum Custom Hooks bana sakte hain.
üü¢ Basic Level Questions
1Ô∏è‚É£ Context API kya hota hai?
Answer:
Context API ek state management tool hai jo React ke andar hi built-in hota hai. Iska use global state ko manage karne ke liye hota hai
 taaki props drilling ko avoid kiya ja sake.

2Ô∏è‚É£ Context API ka use kab karna chahiye?
Answer:
Agar kisi application me multiple components ko ek hi state ki zaroorat hoti hai aur props drilling (data ko multiple levels tak manually pass karna) 
ho rahi hai, toh Context API ka use karna best option hai.

3Ô∏è‚É£ Context API kaise kaam karta hai?
Answer:
Context API teen cheezon ka use karta hai:

React.createContext() ‚Äì Ek naya context banata hai
Provider ‚Äì Jo data provide karta hai
Consumer ya useContext() ‚Äì Jo data ko consume karta hai
üü° Intermediate Level Questions
4Ô∏è‚É£ React Context API ko Redux ke sath compare karo.
Feature	Context API	Redux
Purpose	Global state management for small to medium apps	Complex state management for large apps
Performance	Re-renders ho sakte hain	Optimized with actions and reducers
Boilerplate Code	Kam code likhna padta hai	Zyada configuration aur setup chahiye
Middleware Support	Nahi hai	Haan, jaise Redux Thunk, Redux Saga
5Ô∏è‚É£ React Context API ka performance issue kaise solve kar sakte hain?
Answer:

Context ko chhote chhote parts me divide karo ‚Äì Har component ko sirf usi context ka access do jo usko chahiye
useMemo() ka use karo ‚Äì Taaki unnecessary re-renders avoid ho
useReducer() ka use karo ‚Äì Agar complex state management ho
6Ô∏è‚É£ Multiple Contexts ek sath kaise use karein?
Answer:
Agar ek se zyada contexts ka use karna ho, toh Context Provider ko nested ya separate files me wrap kar sakte hain.

jsx
Copy
Edit
function App() {
  return (
    <ThemeProvider>
      <AuthProvider>
        <MainComponent />
      </AuthProvider>
    </ThemeProvider>
  );
}
üî¥ Advanced Level Questions
7Ô∏è‚É£ useContext() hook ka kya use hai?
Answer:
useContext() ek built-in React hook hai jo Context API se direct value access karne ke liye use hota hai bina Consumer component likhne ke.

jsx
Copy
Edit
const theme = useContext(ThemeContext);
8Ô∏è‚É£ Context API ke andar state update kaise hoti hai?
Answer:
Context ke andar state update karne ke liye hum useState ya useReducer ka use karte hain.

jsx
Copy
Edit
const [theme, setTheme] = useState("light");

return (
  <ThemeContext.Provider value={{ theme, setTheme }}>
    {children}
  </ThemeContext.Provider>
);
9Ô∏è‚É£ Context API ke andar asynchronous operations kaise handle karein?
Answer:
Agar koi API call karni ho toh useEffect() aur useReducer() ka combination use kar sakte hain.

jsx
Copy
Edit
const fetchData = async () => {
  const response = await fetch("https://api.example.com/data");
  const data = await response.json();
  dispatch({ type: "SET_DATA", payload: data });
};
üîü Kya Context API har render pe re-render hota hai? Agar haan toh kaise optimize karein?
Answer:
Haan, Context API har re-render pe re-render ho sakta hai agar uske value object ya function reference change ho jaye. Optimization techniques:

useMemo() ‚Äì Values ko memoize karne ke liye
Separate Contexts ‚Äì Alag alag context bana ke re-renders minimize karna
Component Composition ‚Äì Sirf required components ko wrap karna
